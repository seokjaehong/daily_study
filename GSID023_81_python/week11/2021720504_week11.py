# -*- coding: utf-8 -*-
"""2021720504_week11_heart.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12GAXYt-ispItsLUXy_qKRzesYYqUuc05
"""

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn import metrics
from sklearn import preprocessing
import pandas as pd

# (1) 데이터 호출
# [1] Google colab 에서 수행시
# pip install gdown
# !gdown 1g4sUnM-ioKK2Ha5mFg-_m23RIOCwg8kK
# heart = pd.read_csv('/content/heart.csv')
# heart.describe()

# [2] python 수행시
file_name = 'heart.csv'
heart = pd.read_csv(file_name)
print(heart)

# (2) 전처리
#(2)-1.수치형 전처리
num_cols =['age','trestbps','chol','thalach','oldpeak']
for num_col in num_cols:
  min_val =int(min(heart[num_col]))
  max_val = int(max(heart[num_col]))
  bins = list(range(min_val, max_val,int((max_val-min_val)/3))) #3개구간으로 분할 후 라벨형으로 변환
  bins_label = [int(x) for x in bins]
  heart[num_col]=pd.cut(heart[num_col], bins, right=False, labels=bins_label[:-1])

label_cols = ['sex','cp','fbs','restecg','exang','slope','ca','thal']+ num_cols

#(2)-2. 라벨 전처리
label_encoder = preprocessing.LabelEncoder()
for col in label_cols:
  heart[col] = label_encoder.fit_transform(heart[col])

#(2)-3 컬럼 라벨
# labels = heart.columns.tolist()
# labels.remove('target')

#(2)-4 타겟데이터 선정
# target = heart['target']

heart.head()

#(3) 학습/테스트 세트 구성
X, y = heart.loc[:, heart.columns != 'target'], heart['target']

X_train, X_test,y_train,y_test = train_test_split(X,y,test_size=0.40,random_state=42)


tree = DecisionTreeClassifier(max_depth=5, random_state=22)
tree = tree.fit(X_train,y_train)

y_pred = tree.predict(X_test)

print("sklearn DecisionTree Accuracy:",metrics.accuracy_score(y_test, y_pred))

from sklearn.tree import DecisionTreeClassifier
from sklearn import metrics

max_i =1
score_list=list()
for i in range(max_i,10):
  tree = DecisionTreeClassifier(max_depth=i, random_state=22)
  tree = tree.fit(X_train,y_train)

  y_pred = tree.predict(X_test)
  score = metrics.accuracy_score(y_test, y_pred)
  score_list.append(score)
  print(f"DecisionTree Accuracy depth{i}:",score)
print(f'max_depth:{score_list.index(max(score_list))}', score_list[score_list.index(max(score_list))])